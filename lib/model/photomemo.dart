enum PhotoSource {
  camera,
  gallery,
}

class PhotoMemo {
  String? docId; // doc id generated by Firestore
  String createdBy; // email of the user
  String title;
  String memo;
  String photoFilename; // image / photo to store Storage
  String photoURL; // URL of the image
  DateTime? timestamp;
  late List<dynamic> sharedWith;

  PhotoMemo({
    this.docId,
    required this.createdBy,
    required this.title,
    required this.memo,
    required this.photoFilename,
    required this.photoURL,
    this.timestamp,
    List<dynamic>? sharedWith,
  }) {
    this.sharedWith = sharedWith == null
        ? []
        : [
            ...sharedWith
          ]; // ... spread operator, copy every element in sharedWith parameter to sharedWith object
  }

  static String? validateTitle(String? value) {
    return (value == null || value.trim().length < 3)
        ? 'Title too short'
        : null;
  }

  static String? validateMemo(String? value) {
    return (value == null || value.trim().length < 5) ? 'Memo too short' : null;
  }

  static String? validateSharedWith(String? value) {
    if (value == null || value.trim().isEmpty) return null;

    List<String> emailList =
        value.trim().split(RegExp('(,|;| )+')).map((e) => e.trim()).toList();

    for (String e in emailList) {
      if (e.contains('@') && e.contains('.')) {
        continue;
      } else {
        return 'Invalid email address: comma, semicolon, space seperated list';
      }
    }
    return null;
  }
}
