enum PhotoSource {
  camera,
  gallery,
}

enum DocKeyPhotoMemo {
  title,
  memo,
  createdBy,
  photoFileName,
  photoURL,
  timestamp,
  sharedWith,
}

class PhotoMemo {
  String? docId; // doc id generated by Firestore
  String createdBy; // email of the user
  String title;
  String memo;
  String photoFilename; // image / photo to store Storage
  String photoURL; // URL of the image
  DateTime? timestamp;
  late List<dynamic> sharedWith;

  PhotoMemo({
    this.docId,
    required this.createdBy,
    required this.title,
    required this.memo,
    required this.photoFilename,
    required this.photoURL,
    this.timestamp,
    List<dynamic>? sharedWith,
  }) {
    this.sharedWith = sharedWith == null
        ? []
        : [
            ...sharedWith
          ]; // ... spread operator, copy every element in sharedWith parameter to sharedWith object
  }

  Map<String, dynamic> toFireStoreDoc() {
    return {
      DocKeyPhotoMemo.title.name: title,
      DocKeyPhotoMemo.createdBy.name: createdBy,
      DocKeyPhotoMemo.memo.name: memo,
      DocKeyPhotoMemo.photoFileName.name: photoFilename,
      DocKeyPhotoMemo.photoURL.name: photoURL,
      DocKeyPhotoMemo.timestamp.name: timestamp,
      DocKeyPhotoMemo.sharedWith.name: sharedWith,
    };
  }

  //deserialization
  factory PhotoMemo.fromFireStoreDoc({
    required Map<String, dynamic> doc,
    required String docId,
  }) {
    return PhotoMemo(
      docId: docId,
      createdBy: doc[DocKeyPhotoMemo.createdBy.name] ??= '',
      title: doc[DocKeyPhotoMemo.title.name] ??= '',
      memo: doc[DocKeyPhotoMemo.memo.name] ??= '',
      photoFilename: doc[DocKeyPhotoMemo.photoFileName.name] ??= '',
      photoURL: doc[DocKeyPhotoMemo.photoURL.name] ??= '',
      sharedWith: doc[DocKeyPhotoMemo.sharedWith.name] ??= [],
      timestamp: doc[DocKeyPhotoMemo.timestamp.name] != null
          ? DateTime.fromMillisecondsSinceEpoch(
              doc[DocKeyPhotoMemo.timestamp.name].millisecondsSinceEpoch,
            )
          : null,
    );
  }

  bool isValid() {
    if (createdBy.isEmpty ||
        title.isEmpty ||
        memo.isEmpty ||
        photoFilename.isEmpty ||
        photoURL.isEmpty ||
        timestamp == null) {
      return false;
    } else {
      return true;
    }
  }

  static String? validateTitle(String? value) {
    return (value == null || value.trim().length < 3)
        ? 'Title too short'
        : null;
  }

  static String? validateMemo(String? value) {
    return (value == null || value.trim().length < 5) ? 'Memo too short' : null;
  }

  static String? validateSharedWith(String? value) {
    if (value == null || value.trim().isEmpty) return null;

    List<String> emailList =
        value.trim().split(RegExp('(,|;| )+')).map((e) => e.trim()).toList();

    for (String e in emailList) {
      if (e.contains('@') && e.contains('.')) {
        continue;
      } else {
        return 'Invalid email address: comma, semicolon, space seperated list';
      }
    }
    return null;
  }
}
